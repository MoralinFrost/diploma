CREATE TABLE users
(
    id              INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    firstname       VARCHAR(255)        NOT NULL,
    surname         VARCHAR(255)        NOT NULL,
    grade           VARCHAR(255),
    department      VARCHAR(255),
    email           VARCHAR(255) UNIQUE NOT NULL,
    password        CHAR(60)            NOT NULL,
    photo           TEXT,
    activation_code CHAR(32),
    status          BOOLEAN             NOT NULL DEFAULT TRUE
);

CREATE TABLE roles
(
    id   SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE users_roles
(
    id      INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    UNIQUE (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (role_id) REFERENCES roles (id)
);

CREATE TABLE technologies
(
    id        INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tech_type VARCHAR(255) NOT NULL,
    tech_name VARCHAR(255) NOT NULL
);

CREATE TABLE checks
(
    id             INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    interviewee_id INTEGER   NOT NULL,
    interviewer_id INTEGER   NOT NULL,
    check_date     TIMESTAMP NOT NULL,
    status         BOOLEAN   NOT NULL DEFAULT FALSE,
    feedback       TEXT,
    FOREIGN KEY (interviewee_id) REFERENCES users (id),
    FOREIGN KEY (interviewer_id) REFERENCES users (id)
);

CREATE TABLE check_results
(
    check_id      INTEGER PRIMARY KEY,
    technology_id INTEGER NOT NULL,
    mark          INTEGER NOT NULL CHECK (mark >= 0 AND mark <= 10),
    FOREIGN KEY (check_id) REFERENCES checks (id),
    FOREIGN KEY (technology_id) REFERENCES technologies (id)
);

CREATE TABLE projects
(
    id        INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    namespace VARCHAR(255),
    owner_id  INTEGER NOT NULL,
    FOREIGN KEY (owner_id) REFERENCES users (id)
);

CREATE TABLE projects_users
(
    id         INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    project_id INTEGER NOT NULL,
    user_id    INTEGER NOT NULL,
    UNIQUE (project_id, user_id),
    FOREIGN KEY (project_id) REFERENCES projects (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE tasks
(
    id            INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title         VARCHAR(255) NOT NULL,
    description   TEXT,
    priority      VARCHAR(255),
    deadline_date TIMESTAMP,
    created_date  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    closed_date   TIMESTAMP,
    assigned_id   INTEGER,
    project_id    INTEGER      NOT NULL,
    workflow      VARCHAR(255),
    FOREIGN KEY (assigned_id) REFERENCES users (id),
    FOREIGN KEY (project_id) REFERENCES projects (id)
);

CREATE TABLE comments
(
    id           INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comment      TEXT,
    task_id      INTEGER NOT NULL,
    user_id      INTEGER NOT NULL,
    FOREIGN KEY (task_id) REFERENCES tasks (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE attachments
(
    id         INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    task_id    INTEGER,
    comment_id INTEGER,
    filename   VARCHAR(255) NOT NULL,
    data       BYTEA        NOT NULL,
    FOREIGN KEY (task_id) REFERENCES tasks (id),
    FOREIGN KEY (comment_id) REFERENCES comments (id)
);

CREATE TABLE time_trackers
(
    user_id     INTEGER PRIMARY KEY,
    date        DATE,
    description TEXT,
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE task_tracker
(
    id         INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tracker_id INTEGER NOT NULL,
    task_id    INTEGER NOT NULL,
    UNIQUE (tracker_id, task_id),
    FOREIGN KEY (tracker_id) REFERENCES time_trackers (user_id),
    FOREIGN KEY (task_id) REFERENCES tasks (id)
);
